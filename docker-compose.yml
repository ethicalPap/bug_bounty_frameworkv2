services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: framework_postgres
    environment:
      POSTGRES_DB: framework
      POSTGRES_USER: papv2
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-postgres.sql:/docker-entrypoint-initdb.d/init-postgres.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U papv2 -d framework"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s
    restart: unless-stopped
    networks:
      - framework_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: framework_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - framework_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: framework_backend
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      PORT: 3001
      
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: framework
      DB_USER: papv2
      DB_PASSWORD: password
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # JWT Secrets (CHANGE IN PRODUCTION!)
      JWT_SECRET: your-super-secret-jwt-key-change-in-production-12345
      JWT_REFRESH_SECRET: your-super-secret-refresh-key-change-in-production-67890
      
      # Frontend URL
      FRONTEND_URL: http://localhost:3000
      
      # Run database initialization
      RUN_SEEDS: "false"
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - scan_data:/app/scan_data
      - ./backend/tools:/app/tools
    restart: unless-stopped
    networks:
      - framework_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend (nginx serving the frontend directory)
  frontend:
    image: nginx:alpine
    container_name: framework_frontend
    ports:
      - "3000:80"
    volumes:
      # Mount the entire frontend directory, not just index.html
      - ./frontend:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    restart: unless-stopped
    networks:
      - framework_network
    depends_on:
      - backend

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  scan_data:
    driver: local

networks:
  framework_network:
    driver: bridge